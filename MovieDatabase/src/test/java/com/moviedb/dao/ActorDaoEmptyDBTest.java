package com.moviedb.dao;

import com.moviedb.database.EmptyDBSetup;
import com.moviedb.models.Actor;
import org.junit.jupiter.api.Test;

import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.assertTrue;
import static org.junit.jupiter.api.Assertions.assertFalse;

public class ActorDaoEmptyDBTest extends EmptyDBSetup {

    private ActorDao dao;

    @Test
    void createTest() {
        ActorDao dao = new ActorDao(connection);
        String actorName1 = "Test Actor 1";
        String actorName2 = "Test Actor 2";

        // Luo näyttelijät tietokantaan ja oleta että create palauttaa generoidun id:n
        int actorId1 = dao.create(new Actor(actorName1));
        int actorId2 = dao.create(new Actor(actorName2));

        // Lue luodut näyttelijät tietokannasta
        Optional<Actor> foundActor1 = dao.read(actorId1);
        Optional<Actor> foundActor2 = dao.read(actorId2);

        // Varmista että näyttelijät löytyvät tietokannasta ja vertaa niitä luotuihin olioihin
        assertTrue(foundActor1.isPresent(), "Actor 1 should be present");
        assertTrue(foundActor2.isPresent(), "Actor 2 should be present");
        assertEquals(actorName1, foundActor1.get().getName(), "Actor 1's name should match");
        assertEquals(actorName2, foundActor2.get().getName(), "Actor 2's name should match");

        // Varmista että luodut id:t vastaavat tietokannasta löydettyjä id:tä
        assertEquals(actorId1, foundActor1.get().getId(), "Actor 1's id should match");
        assertEquals(actorId2, foundActor2.get().getId(), "Actor 2's id should match");
    }


    @Test
    void readTest() {
        ActorDao dao = new ActorDao(connection);

        // Create a new Actor object without an ID since it will be generated by the database
        String name = "Test Actor 1";
        Actor testActor = new Actor(name);
        int actorId = dao.create(testActor);

        // Retrieve the actor from the database by the generated ID
        Optional<Actor> foundActor = dao.read(actorId);

        // Assert that the retrieved Optional contains an Actor object
        assertTrue(foundActor.isPresent(), "Actor should be present");

        // If an actor is found, assert that the actor's properties match those of the test actor
        foundActor.ifPresent(actor -> {
            assertEquals(name, actor.getName(), "Actor name should match");
            assertEquals(actorId, actor.getId(), "Actor ID should match");
        });

        // Assert that non-existent actor is not in the database
        Optional<Actor> fetchedActor = dao.read(99);  // Should return an empty Optional
        assertTrue(fetchedActor.isEmpty(), "Actor should not be present");
    }


    @Test
    void updateTest() {
        ActorDao dao = new ActorDao(connection);

        String originalName = "Original Actor";
        Actor actor = new Actor(originalName);
        int actorId = dao.create(actor);

        String updatedName = "Updated Actor";
        actor.setName(updatedName);
        actor.setId(actorId); // Set the actor's ID to the one generated by the database.

        // Perform the update and assert that it was successful.
        boolean updateSuccessful = dao.update(actor);
        assertTrue(updateSuccessful, "The update should be successful");

        // Retrieve the updated actor from the database.
        Optional<Actor> updatedActorOpt = dao.read(actorId);

        // Assert that the retrieved Optional contains an Actor object and confirm the update of the name
        assertTrue(updatedActorOpt.isPresent(), "Actor should be present after update");
        updatedActorOpt.ifPresent(updatedActor -> {
            assertEquals(updatedName, updatedActor.getName(), "Actor's name should be updated in the database");
        });
    }


    @Test
    void readAllTest() {
        dao = new ActorDao(connection);

        // Read all actors from empty database and assert that the list is empty
        List<Actor> actors = dao.readAll();
        assertTrue(actors.isEmpty());
    }


    @Test
    void getActorByIdTest() {
        dao = new ActorDao(connection);

        // Attempt to retrieve an actor by ID from an empty database and assert the result is empty Optional
        Optional<Actor> result = dao.getActorById(1);
        assertFalse(result.isPresent(), "No actors should be found by id in an empty database");
    }


    @Test
    void getActorByNameTest() {
        dao = new ActorDao(connection);

        Optional<Actor> result = dao.getActorByName("Test Actor");
        assertFalse(result.isPresent(), "No actors should be found by name in an empty database");
    }
}
